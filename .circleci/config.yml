version: 2.1
orbs:
  slack: circleci/slack@4.10.1
  #node: circleci/node@x.y #can remove if job fails

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#       workflowid:
#         type : string
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             echo "Destroying environment: <<parameters.workflowid>>"
#             # Your code here
#             aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowid>>
#             aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowid>>
#             aws s3 rm s3://udapeople-<<parameters.workflowid>> --recursive


#   revert-migrations:
    # description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    #   # Add parameter here    
    #   workflowid:
    #     type : string
    # steps:
    #   - run:
    #       name: Revert migrations
    #       # Add when this will run
    #       when: on_fail
    #       command: |
    #         # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
    #         SUCCESS=$(curl --insecure https://kvdb.io/XEtP9sz3Uy2Lb7RWu996QY/migration_<<parameters.workflowid>>)
    #         echo $SUCCESS
    #         if (($SUCCESS==1));
    #         then
    #           cd ~/project/backend
    #           npm install           
    #           npm run migrations:revert
    #         fi
            


jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
             # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command:  |
            cd frontend
            npm install
            npm run test
                
  test-backend:

    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command:  |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Front-end scan
          command:  |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical         


  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end scan
          command:  |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            
  






workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]



